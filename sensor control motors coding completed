#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <IRremote.h> // add IR remote library
LiquidCrystal_I2C lcd(0x27,20,4);  //Change the HEX address

//Setup pins in Channel A
  const int MotorPinA = 12;
  const int MotorSpeedPinA = 3;
  const int MotorBrakePinA = 9;

//Setup pins in Channel B
  const int MotorPinB = 13;
  const int MotorSpeedPinB = 11;
  const int MotorBrakePinB = 8;
//Setup derictions in Channel A & B
  const int CW = HIGH;
  const int CCW = LOW;
  
//  const int showComments = 1;// show comments in serial monitor
int IR0 = 2;  // sensor pin detect the car outdoor 
int IR1 = 3;  // sensor pin detect the car indoor  

int recvpin1 = 8; // sensor pin detect the car at the spot 1
int recvpin2 = 9; // sensor pin detect the car at the spot 2
int recvpin3 = 10; // sensor pin detect the car at the spot 3
int recvpin4 = 11; // sensor pin detect the car at the spot 4
int recvpin5 = 12; // sensor pin detect the car at the spot 5
int recvpin6 = 13; // // sensor pin detect the car at the spot 6

int Slot = 6;           //Enter Total number of parking Slots

int motor_angle = 0;
char enter_spot = 0; // this spot number give to customer and they enter it when take car back

int flag1 = 0;
int flag2 = 0;

IRrecv irrecv1(recvpin1); 
IRrecv irrecv2(recvpin2); 
IRrecv irrecv3(recvpin3); 
IRrecv irrecv4(recvpin4); 
IRrecv irrecv5(recvpin5); 
IRrecv irrecv6(recvpin6); 

decode_results results1;
decode_results results2;
decode_results results3;
decode_results results4;
decode_results results5;
decode_results results6;


int spot[] = {1, 2, 3, 4, 5, 6};
int root[6] = {1, 2, 3, 4, 5, 6};

int ground = 1; // define the initial ground is spot 1

int Total = 6;           //Enter Total number of parking Slots
void setup()
{
  Serial.begin(9600);
  Serial.println("enter_spot number: ");
 
  pinMode(IR0, INPUT);
  pinMode(IR1, INPUT);
  
  lcd.init();
  lcd.backlight();
  lcd.setCursor (0,0); // the row at which to position the cursor (with 0 being the first row)
  lcd.print(" SMART ROTARY ");
  lcd.setCursor (0,1);
  lcd.print(" PARKING SYSTEM ");
  delay (2000);
  lcd.clear();
   //Serial.begin(9600); // initialize serial communication
  Serial.println("spot number is: "); // display message
  irrecv1.enableIRIn();  // Start the receiver  
  irrecv2.enableIRIn();  // Start the receiver
  irrecv3.enableIRIn();  // Start the receiver
  irrecv4.enableIRIn();  // Start the receiver
  irrecv5.enableIRIn();  // Start the receiver
  irrecv6.enableIRIn();  // Start the receiver
  delay(2000);
  
  // motor A pin assignment
  pinMode(MotorPinA, OUTPUT); //Initiates Motor Channel A pin
  pinMode(MotorSpeedPinA, OUTPUT);//Initiates Speed Channel A pin
  pinMode(MotorBrakePinA, OUTPUT); //Initiates Brake Channel A pin

  // motor B pin assignment
  pinMode(MotorPinB, OUTPUT); //Initiates Motor Channel B pin
  pinMode(MotorSpeedPinB, OUTPUT);//Initiates Speed Channel B pin
  pinMode(MotorBrakePinB, OUTPUT); //Initiates Brake Channel B pin
  if (Serial.available() > 0) {    // is a character available?
    enter_spot = Serial.read();       // get the character

    // check if a number was received
    if ((enter_spot >= '1') && (enter_spot <= '6')) {
      Serial.print("Number received: ");
      Serial.println(enter_spot);
    }
    else {
      Serial.println("Invalid number.");
    }
  } // end: if (Serial.available() > 0)
}
void loop() 
{
  parking();
  Taking(); 
  slidinggate();  
//  Gatemove();
//  Gatestop();          
}

void parking()

{
if(irrecv1.decode(&results1) == 0 || irrecv1.decode(&results1) == 16 || irrecv1.decode(&results1) == 24 || irrecv1.decode(&results1) == 28|| irrecv1.decode(&results1) == 30 || irrecv1.decode(&results1) == 31) 
{
      digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
      digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
      analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
      delay(5000);
  
      digitalWrite(recvpin1, LOW); // Tray 1 is occupied
      Total --;
      spot[1] = 1;
      ground = 1;
      if(ground = 1)
      {
      digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
      delay(3000);
      }        else
      digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
      digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
      analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
      delay(5000);
      }


else if(irrecv2.decode(&results2) == 32 || irrecv2.decode(&results2) == 40 || irrecv2.decode(&results2) == 44 || irrecv2.decode(&results2) == 46 || irrecv2.decode(&results2) == 47)
{
      digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
      digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
      analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
      delay(5000);

      digitalWrite(recvpin2, LOW); // Tray 2 is occupied
      Total --;
      spot[2] = 1;
      ground = 2;
      if(ground = 2)
      {
      digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
      delay(3000);
      }
      else
      digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
      digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
      analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
      delay(5000);

      }
    
    else if(irrecv3.decode(&results3) == 48 || irrecv3.decode(&results3) == 52 | irrecv3.decode(&results3) == 54 || irrecv3.decode(&results3) == 55)
    {
      digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
      digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
      analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
      delay(5000);

      digitalWrite(recvpin3, LOW); // Tray 3 is occupied
      Total --;
      spot[3] = 1;
      ground = 3;
      if(ground = 3)
      {
      digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
      delay(3000);
      }
        else
      digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
      digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
      analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
      delay(5000);
      }
    
else if(irrecv4.decode(&results4) == 56 || irrecv4.decode(&results4) == 58 || irrecv4.decode(&results4) == 59)
    {
      digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
      digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
      analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
      delay(5000);

      digitalWrite(recvpin4, LOW); // Tray 4 is occupied
      Total --;
      spot[4] = 1;
      ground = 4;
      if(ground = 4)
      {
      digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
      delay(3000);
      }
        else
      digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
      digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
      analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
      delay(5000);
      }
    
    else if(irrecv5.decode(&results5) == 60 || irrecv5.decode(&results5) == 61)
    {
      digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
      digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
      analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
      delay(5000);
      
      digitalWrite(recvpin5, LOW); // Tray 5 is occupied
      Total --;
      spot[5] = 1;
      ground = 5;
      if(ground = 5)
      {
      digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
      delay(3000);
      }
        else
      digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
      digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
      analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
      delay(5000);
      }
      
    else if(irrecv6.decode(&results6) == 62)
    {
      digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
      digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
      analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
      delay(5000);
     
      digitalWrite(recvpin6, LOW); // Tray 6 is occupied
      Total --;
      spot[6] = 1;
      ground = 6;
      if(ground = 6)
      {
      digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
      delay(3000);
      }
        else
      digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
      digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
      analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
      delay(5000);
      }

else
{
lcd.setCursor (0,0);
lcd.print("    SORRY :(    ");  
lcd.setCursor (0,1);
lcd.print("  Parking Full  "); 
delay (200);
lcd.clear(); 
}
  }


void Taking()
{
  switch(root[6])
  {
    case 1:
      if(enter_spot == 1)
      { 
        digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
        delay(3000); 
      }
      else 
      
        digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
        digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
        analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
        delay(5000);

      root == enter_spot;

      if(root == enter_spot) 
      {
        digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
        delay(3000);
      }
        else
        digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
        digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
        analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
        delay(5000);
      
      //Total ++;
      break;
    case 2:
      if(enter_spot == 2) 
      {
        digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
        delay(3000);
      }
      else
        digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
        digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
        analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
        delay(5000);
      
      root == enter_spot;
      if(root == enter_spot) 
      {
        digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
        delay(3000);
      }
        else
        digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
        digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
        analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
        delay(5000);
      //Total ++;
      break;
    case 3:
      if(enter_spot == 3) 
      {
        digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
        delay(3000);
      }
        else
        digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
        digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
        analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
        delay(5000);
      
        root == enter_spot;
      if(root == enter_spot) 
      {
        digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
        delay(3000);
      }
        else
        digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
        digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
        analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
        delay(5000);
      //Total ++;
      break;
    case 4:
      if(enter_spot == 4) 
      {
        digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
        delay(3000);
      }
        else
        digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
        digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
        analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
        delay(5000);
      
      root == enter_spot;
      if(root == enter_spot)
      {
        digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
        delay(3000);
      }
        else
        digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
        digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
        analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
        delay(5000);
        
      //Total ++;
      break;
    case 5:
      if(enter_spot == 5) 
      {
        digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
        delay(3000);
      }
        else
        digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
        digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
        analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
        delay(5000);
      
      root == enter_spot;
      if(root == enter_spot)
      {
        digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
        delay(3000);
      }
        else
        digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
        digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
        analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
        delay(5000);
    
     // Total ++;
      break;
    case 6:
      if(enter_spot == 6) 
      {
        digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
        delay(3000);
      }
        else
        digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
        digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
        analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
        delay(5000);
      
      root == enter_spot;
      if(root == enter_spot)
      {
        digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
        delay(3000);
      }
        else
        digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
        digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
        analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
        delay(5000);
    //  Total ++;
    //  break;
  }
}
   
   
void slidinggate()
{ 
if(digitalRead (IR0) == LOW && flag1==0){
if(Slot>0){flag1=1;
if(flag2==0)
{
//forward @  25% duty cycle speed
  digitalWrite(MotorPinA, CW); //Establishes forward direction of Channel A
  digitalWrite(MotorBrakePinA, LOW);   //Disengage the Brake for Channel A
  analogWrite(MotorSpeedPinA, 64);   //Spins the motor on Channel A at 15% duty cycle speed
  delay(3000);
  digitalWrite(MotorBrakePinA, HIGH); //Eengage the Brake for Channel 
  delay(4000);
  //backward @  50% duty cycle speed
 digitalWrite(MotorPinA, CCW); //Establishes backward direction of Channel A
 digitalWrite(MotorBrakePinA, LOW);   //Disengage the Brake for Channel A
 analogWrite(MotorSpeedPinA, 64);   //Spins the motor on Channel A at 50% duty cycle speed
 delay(3000);
 digitalWrite(MotorBrakePinA, HIGH); //Eengage the Brake for Channel A

  
  Slot = Slot-1;
  }
}else{
lcd.setCursor (0,0);
lcd.print("    SORRY :(    ");  
lcd.setCursor (0,1);
lcd.print("  Parking Full  "); 
delay (3000);


lcd.clear(); 
}
}

if(digitalRead (IR1) == LOW && flag2==0){flag2=1;
if(flag1==0)
{
  
//forward @  25% duty cycle speed
  digitalWrite(MotorPinA, CW); //Establishes forward direction of Channel A
  digitalWrite(MotorBrakePinA, LOW);   //Disengage the Brake for Channel A
  analogWrite(MotorSpeedPinA, 64);   //Spins the motor on Channel A at 15% duty cycle speed
  delay(3000);
  digitalWrite(MotorBrakePinA, HIGH); //Eengage the Brake for Channel A
 delay(4000);
//backward @  50% duty cycle speed
digitalWrite(MotorPinA, CCW); //Establishes backward direction of Channel A
 digitalWrite(MotorBrakePinA, LOW);   //Disengage the Brake for Channel A
 analogWrite(MotorSpeedPinA, 64);   //Spins the motor on Channel A at 50% duty cycle speed
delay(3000);
 digitalWrite(MotorBrakePinA, HIGH); //Eengage the Brake for Channel A
  
  Slot = Slot+1;
  }
}

if(flag1==1 && flag2==1){
// delay (1000);
delay (1000);
// myservo1.write(100);
//
  digitalWrite(MotorBrakePinA, HIGH); //Eengage the Brake for Channel A
  
  //delay(5000);
flag1=0, flag2=0;
}
lcd.setCursor (0,0);
lcd.print("    WELCOME!    ");
lcd.setCursor (0,1);
lcd.print("Slot Left: ");
lcd.print(Slot);
}


//void Gatemove()
//{
//  digitalWrite(MotorPinB, CW); //Establishes forward direction of Channel B
//  digitalWrite(MotorBrakePinB, LOW);   //Disengage the Brake for Channel B
//  analogWrite(MotorSpeedPinB, 64);   //Spins the motor on Channel B at 15% duty cycle speed
//  delay(5000);
//}
//void Gatestop()
//{
//  digitalWrite(MotorBrakePinB, HIGH); //Eengage the Brake for Channel 
//  delay(3000);
//}
//}
