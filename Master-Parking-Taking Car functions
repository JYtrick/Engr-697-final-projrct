#include <Wire.h>
//#include <LiquidCrystal_I2C.h>
#include <IRremote.h> // add IR remote library
//LiquidCrystal_I2C lcd(0x27, 20, 4); //Change the HEX address

// Communication
#define UNO_ADDR 9
#define ANSWERSIZE 6

//Setup pins in Channel A
const int MotorPinA = 12;
const int MotorSpeedPinA = 3;
const int MotorBrakePinA = 9;

//Setup pins in Channel B
const int MotorPinB = 13;
const int MotorSpeedPinB = 11;
const int MotorBrakePinB = 8;

//Setup derictions in Channel A & B
const int CW = HIGH;
const int CCW = LOW;


int IR0 = 0;  // sensor pin detect the car outdoor
int IR1 = 0;  // sensor pin detect the car indoor

int recvpin1 = 2; // sensor pin detect the car at the spot 1
int recvpin2 = 4; // sensor pin detect the car at the spot 2
int recvpin3 = 5; // sensor pin detect the car at the spot 3
int recvpin4 = 6; // sensor pin detect the car at the spot 4
int recvpin5 = 7; // sensor pin detect the car at the spot 5
int recvpin6 = 10; // sensor pin detect the car at the spot 6
int Total = 6; //Total number of parking Slots
int Slot; //Parking Slots

int irr1, irr2, irr3, irr4, irr5, irr6, in, out, posCheck;
int answer[ANSWERSIZE] = {0, 0, 0, 0, 0, 0};

// Boolean value to keep track on the parking or taking
int flag1 = 0;
int flag2 = 0;
int ground, pivot; // Keep track the ground position
int input;
int data;

void setup()
{
  Serial.begin(9600);
  Wire.begin(UNO_ADDR);

  // Start the sensor/receiver
  pinMode(IR0, INPUT);
  pinMode(IR1, INPUT);
  pinMode(recvpin1, INPUT);
  pinMode(recvpin2, INPUT);
  pinMode(recvpin3, INPUT);
  pinMode(recvpin4, INPUT);
  pinMode(recvpin5, INPUT);
  pinMode(recvpin6, INPUT);

  // Motor A (sliding gate)
  pinMode(MotorPinA, OUTPUT); //Initiates Motor Channel A pin
  pinMode(MotorSpeedPinA, OUTPUT);//Initiates Speed Channel A pin
  pinMode(MotorBrakePinA, OUTPUT); //Initiates Brake Channel A pin

  // Motor B (rotating spot)
  pinMode(MotorPinB, OUTPUT); //Initiates Motor Channel B pin
  pinMode(MotorSpeedPinB, OUTPUT);//Initiates Speed Channel B pin
  pinMode(MotorBrakePinB, OUTPUT); //Initiates Brake Channel B pin
  
  // Initial value 
  ground = 1;
  
  Wire.onRequest(requestEvent);
  Wire.onReceive(receiveEvent);

}

void loop() {
  // Get values from sensors
  irr1 = digitalRead(recvpin1);
  irr2 = digitalRead(recvpin2);
  irr3 = digitalRead(recvpin3);
  irr4 = digitalRead(recvpin4);
  irr5 = digitalRead(recvpin5);
  irr6 = digitalRead(recvpin6);

  // Get the values from sensors to array
  answer[0] = irr1;
  answer[1] = irr2;
  answer[2] = irr3;
  answer[3] = irr4;
  answer[4] = irr5;
  answer[5] = irr6;
  
  in = digitalRead(IR0);
  out = digitalRead(IR1);
  posCheck = (irr1 * 32) + (irr2 * 16) + (irr3 * 8) + (irr4 * 4) + (irr5 * 2) + (irr6 * 1); 
  //opengate();
  //delay(1000);
  parkingCar();
  //delay(1000);
  takingCar();
  //delay(1000);
  //closegate();
  //delay(1000);
}

void receiveEvent() { 
  // Read while data received
  while (0 < Wire.available()) {
    input = Wire.read();
  }
  
  // Print to Serial Monitor
  Serial.print("Received: ");
  Serial.println(input); 
  delay (2000);
}

void requestEvent() {  
  int response[ANSWERSIZE];
  
  for (int i=0; i<ANSWERSIZE;i++) {
    response[i] = answer[i];
    Wire.write(response[i]);
  }
  
  Serial.println("Responsed");
  delay (2000);
}

void rotatingMotor(int motorSpeed, int motorDir, int startingPoint) {
  digitalWrite(MotorPinB, motorDir);
  digitalWrite(MotorBrakePinB, LOW);   
  analogWrite(MotorSpeedPinB, motorSpeed);   
  delay (startingPoint * 800);
  digitalWrite(MotorBrakePinB, HIGH);
}

bool checkEmptySpot(int arr[]) {
  bool empty = false;
  int index = 0;

  while (index < ANSWERSIZE) {
    if (arr[index] == 1) {
      empty = true;
      return empty;
    }
    else {
      index++;
    }
  }
  return empty;
}

int countSpot(int arr[]) {
  int count = 0;
  int index = 0;
  while (index < ANSWERSIZE) {
    if (arr[index] == 1) {
      count++;
      index++;
    }
    else {
      index++;
    }
  }
  return count;
}

void parkingCar() {
  // input 1  
  if (input == 1 && in == LOW) {
    if (irr1 == HIGH) {
      if (ground == 1) {
        Serial.println("YOUR SPOT IS 1");
      }
      else {
        pivot = ground - 1;
        rotatingMotor(115, CW, pivot);
        ground = input;
      }
    }
    else {
      Serial.println("SPOT 1 IS OCCUPIED");
    }
  }

  // input 2
  if (input == 2 && in == LOW) { 
    if (irr2 == HIGH) {
      if (ground == 2) {
        Serial.println("YOUR SPOT IS 2"); 
      }
      
      if (ground == 1) {
        rotatingMotor(115, CW, 1);
        ground = input;
      }
      else {
        pivot = ground - 2;
        rotatingMotor(115, CCW, pivot);
        ground = input;
      }
    }
    else {
      Serial.println("SPOT 2 IS OCCUPIED");
    }
  }

  // input 3
  if (input == 3 && in == LOW) {
    if (irr3 == HIGH) {
      if (ground == 3) {
        Serial.println("YOUR SPOT IS 3");  
      }
      
      if (ground == 1 || ground == 2) {
        pivot = 3 - ground;
        rotatingMotor(115, CW, pivot);
        ground = input;
      }
      else {
        pivot = ground - 3;
        rotatingMotor(115, CCW, pivot);
        ground = input;
      }
    }
    else {
      Serial.println("SPOT 3 IS OCCUPIED");
    }
  }

  // input = 4
  if (input == 4 && in == LOW) {
    if (irr4 == HIGH) {
      if (ground == 4) {
        Serial.println("YOUR SPOT IS 4");  
      }
      
      if (ground == 1 || ground == 2 || ground == 3) {
        pivot = 4 - ground;
        rotatingMotor(115, CW, pivot);
        ground = input;
      }
      else {
        pivot = ground - 4;
        rotatingMotor(115, CCW, pivot);
        ground = input;
      }
    }
    else {
      Serial.println("SPOT 4 IS OCCUPIED");
    }
  }

  // input 5
  if (input == 5 && in == LOW) {
    if (irr5 == HIGH) {
      if (ground == 5) {
        Serial.println("YOUR SPOT IS 5");  
      }
      
      if (ground == 6) {
        rotatingMotor(115, CCW, 1);
        ground = input;
      }
      else {
        pivot = 5 - ground;
        rotatingMotor(115, CW, pivot);
        ground = input;
      }
    }
    else {
      Serial.println("SPOT 5 IS OCCUPIED");
    }
  }

  // input 6
  if (input == 6 && in == LOW) {
    if (irr6 == HIGH) {
      if (ground == 6) {
        Serial.println("YOUR SPOT IS 6");
      }
      else {
        pivot = 6 - ground;
        rotatingMotor(115, CW, pivot);
        ground = input;
      }
    }
    else {
      Serial.println("SPOT 6 IS OCCUPIED");
    }
  }
  
  if (posCheck == 0)
  {
    Serial.println("FULL");
  }

  Serial.print("Available: ");
  Serial.println(countSpot(answer)); 
  Serial.print("Empty: ");
  if (checkEmptySpot(answer)) {
    Serial.println("YES");
  }
  else {
    Serial.println("NO");
  }
  Serial.print("Position check for Parking function: ");
  Serial.println(posCheck);
  Serial.print("Current slot for Parking function: ");
  Serial.println(ground);
  Serial.println("");
}

void takingCar() {
  // input 1
  if (input == 1) {
    if (irr1 == LOW) {
      if (ground == 1) {
        Serial.println("YOUR CAR IS RETRIVED");
      }
      else {
        pivot = ground - 1;
        rotatingMotor(115, CCW, pivot);
        ground = input;
      }
    }
    else {
      Serial.println("SPOT 1 IS EMPTY");
    }
  }
  
  // input 2
  if (input == 2) {
    if (irr2 == LOW) {
      if (ground == 2) {
        Serial.println("YOUR CAR IS RETRIVED");
      }
      
      if (ground == 1) {
        rotatingMotor(115, CW, 1);
        ground = input;
      }
      else {
        pivot = ground - 2;
        rotatingMotor(115, CCW, pivot);
        ground = input;
      }
    }
    else {
      Serial.println("SPOT 2 IS EMPTY");
    }
  }
  
  // input 3
  if (input == 3) {
    if (irr3 == LOW) {
      if (ground == 3) {
        Serial.println("YOUR CAR IS RETRIVED");
      }
      
      if (ground == 1 || ground == 2) {
        pivot = 3 - ground;
        rotatingMotor(115, CW, pivot);
        ground = input;
      }
      else {
        pivot = ground - 3;
        rotatingMotor(115, CCW, pivot);
        ground = input;
      }
    }
    else {
      Serial.println("SPOT 3 IS EMPTY");
    }
  }
  
  // input 4
  if (input == 4) {
    if (irr4 == LOW) {
      if (ground == 4) {
        Serial.println("YOUR CAR IS RETRIVED");
      }
      
      if (ground == 1 || ground == 2 || ground ==3) {
        pivot = 4 - ground;
        rotatingMotor(115, CW, pivot);
        ground = input;
      }
      else {
        pivot = ground - 4;
        rotatingMotor(115, CCW, pivot);
        ground = input;
      }
    }
    else {
      Serial.println("SPOT 4 IS EMPTY");
    }
  }

  // input 5
  if (input == 5) {
    if (irr5 == LOW) {
      if (ground == 5) {
        Serial.println("YOUR CAR IS RETRIVED");
      }
      
      if (ground == 6) {
        rotatingMotor(115, CCW, 1);
        ground = input;
      }
      else {
        pivot = 5- ground;
        rotatingMotor(115, CW, pivot);
        ground = input;
      }
    }
    else {
      Serial.println("SPOT 5 IS EMPTY");
    }
  }
  
  // input 6
  if (input == 6) {
    if (irr6 == LOW) {
      if (ground == 6) {
        Serial.println("YOUR CAR IS RETRIVED");
      }
      else {
        pivot = 6 - ground;
        rotatingMotor(115, CW, pivot);
        ground = input;
      }
    }
    else {
      Serial.println("SPOT 6 IS EMPTY");
    }
  }
  
  Serial.print("Available: ");
  Serial.println(countSpot(answer));
  Serial.print("Empty: ");
  if (checkEmptySpot(answer)) {
    Serial.println("YES");
  }
  else {
    Serial.println("NO");
  } 
  Serial.print("Position check for Taking function: ");
  Serial.println(posCheck);
  Serial.print("Current slot for Taking function: ");
  Serial.println(ground);
  Serial.println("");
  delay (1000);
}

void opengate() {
  if (in == LOW && checkEmptySpot(answer)) {
    digitalWrite(MotorPinA, CW); //Establishes forward direction of Channel A
    digitalWrite(MotorBrakePinA, LOW);   //Disengage the Brake for Channel A
    analogWrite(MotorSpeedPinA, 64);   //Spins the motor on Channel A at 15% duty cycle speed
    delay(3000);
    digitalWrite(MotorBrakePinA, HIGH); //Eengage the Brake for Channel
  }
  else {
    Serial.println("FULL");
  }
}

void closegate() {
  if ((irr1 == 0 || irr2 == 0 || irr3 == 0 || irr4 == 0 || irr5 == 0 || irr6 == 0) && in == 1) {
    //backward @  50% duty cycle speed
    digitalWrite(MotorPinA, CCW); //Establishes backward direction of Channel A
    digitalWrite(MotorBrakePinA, LOW);   //Disengage the Brake for Channel A
    analogWrite(MotorSpeedPinA, 64);   //Spins the motor on Channel A at 50% duty cycle speed
    delay(3000);
    digitalWrite(MotorBrakePinA, HIGH); //Eengage the Brake for Channel A
  }
  else {
    Serial.println("FULL");  
  }
}
